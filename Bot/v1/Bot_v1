#!/usr/bin/env python3
# Python 3.6

# Import the Halite SDK, which will let you interact with the game.
import hlt

# This library contains constant values.
from hlt import constants
from hlt import engine

# This library contains direction metadata to better interface with the game.
from hlt.positionals import Direction, Position

# This library allows you to generate random numbers.
import random

# Logging allows you to save messages for yourself. This is required because the regular STDOUT
#   (print statements) are reserved for the engine-bot communication.
import logging

#import other libraries
import numpy as np
import itertools
import math
""" <<<Game Begin>>> """
game = hlt.Game()




# Grid Search for Halite
 
# =============================================================================
# init_map = game.game_map
# grid_width = 4
# n_grids  = (init_map.width+1)/ grid_width
# arr = np.zeros(2)
# 
# counter = 0
# for i in np.arange(int(n_grids)):
#     for j in np.arange(int(n_grids)):
#         grid_sum = 0
#         for _ in list(itertools.product(np.arange(i*grid_width, (i+1)*grid_width), 
#                                         np.arange(j*grid_width, (j+1)*grid_width))):
#             grid_sum += init_map[Position(_[0],_[1])].halite_amount
#         grid_mean = grid_sum/ (grid_width**2)
#         arr = np.vstack([arr, [_, grid_mean]])
#         counter += 1
# arr = arr[1:,:]     
# 
# =============================================================================

    

game.ready("MyPythonBot_v1")
logging.info("Successfully created MyBot v1! My Player ID is {}.".format(game.my_id))

""" <<<Game Loop>>> """


if game.game_map.width<=48:
    max_ships = 10
    turns_to_increase = 50
else:
    max_ships = 20
    turns_to_increase = 25



def step_function(t, initial_v, turns_to_increase=turns_to_increase):
    if t < 50:
        return 1
    else:
        return int(initial_v + math.floor(t/turns_to_increase))

while True:
    game.update_frame()
    
    me = game.me
    game_map = game.game_map
    
    command_queue = []
    team_queue = []
        
    for ship in me.get_ships():
        
        ship_engine = engine.engine_1(ship, me, game_map)        
        ship_engine.radius_search(radius=step_function(game.turn_number, 5))        
        ship_engine.action(beta=0.7)
        
        command_queue.append(ship_engine.command)
        #team_queue.append(ship_engine.summary)

    if me.halite_amount >= constants.SHIP_COST and not game_map[me.shipyard].is_occupied and len(me.get_ships())<max_ships:
        command_queue.append(me.shipyard.spawn())
        logging.info("Spawn New Ship")

    #logging.info("Team queue: {}".format(team_queue))
    #team_engine = engine.team_engine(team_queue)
    #team_engine.move_adjustment()
    
    game.end_turn(command_queue)
